dist <- pxCount * r[6] ## GSIF uses a distance for the tile ... not pixel count
p_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = TRUE)
#overlap.percent = Buffer / pxCount *100) ## add later
p_tiles <- sf::st_as_sf(p_tiles)
p_tiles$id <- seq(1:nrow(p_tiles))
t_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = FALSE)
t_tiles$id <- seq(1:nrow(t_tiles))
p_tiles <- dplyr::left_join(p_tiles, t_tiles)
return(p_tiles)
}
# GSIF requires a GDAL object
tile_index <- function(rFile, pxCount){
# # ## testing
#
# pxCount = 100
# rFile <- "e:/tmp/tmp2.tif"
#
r <- rgdal::GDALinfo(rFile)
dist <- pxCount * r[6] ## GSIF uses a distance for the tile ... not pixel count
p_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = TRUE)
#overlap.percent = Buffer / pxCount *100) ## add later
p_tiles <- sf::st_as_sf(p_tiles)
p_tiles$id <- seq(1:nrow(p_tiles))
t_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = FALSE)
t_tiles$id <- seq(1:nrow(t_tiles))
p_tiles <- dplyr::left_join(p_tiles, t_tiles)
return(p_tiles)
}
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
# Create an raster example
r1 <- raster::raster(ncol=200, nrow=200, xmn=547000, xmx=552000, ymn=5985000, ymx=5990000)
raster::crs(r1) <- "+init=EPSG:3157"
r1 <- raster::setValues(r1, seq(1:length(r1)))
raster::writeRaster(r1, "e:/tmp/tmp.tif", overwrite = TRUE)
# call function
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 100)
mapview::mapview(tiles, alpha = 0.5)
# call function
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 50)
mapview::mapview(tiles, alpha = 0.5)
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2019/PEM_2020/")
## Compile Documentation -------------------------------
setwd("./PEMWorkFlow/")
document()
## Install Package
setwd("..")
install("PEMWorkFlow")
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2019/PEM_2020/")
## Compile Documentation -------------------------------
setwd("./PEMWorkFlow/")
document()
## Install Package
setwd("..")
install("PEMWorkFlow")
## Compile Documentation -------------------------------
setwd("./PEMWorkFlow/")
## Install Package
setwd("..")
install("PEMWorkFlow")
#
# create("PEMWorkFlow")
setwd("e:/workspace/2019/PEM_2020/")
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2019/PEM_2020/")
## Compile Documentation -------------------------------
setwd("./PEMWorkFlow/")
## Install Package
setwd("..")
install("PEMWorkFlow")
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
install.packages("SpaDES.tools")
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
install.packages("GSIF")
install.packages("SpaDES.tools")
document()
## Install Package
setwd("..")
install("pemGenertaR")
document()
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Install Package
setwd("..")
install("pemGenertaR")
library(pemgeneratr)
?pemgeneratr
?make_lines
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Install Package
setwd("..")
install("pemGenertaR")
library(pemgeneratr)
library("pemgeneratr")
?make_lines
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
## Install Package
setwd("..")
document()
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
??document
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
document()
install.packages("SpaDES.tools")
document()
## Install Package
setwd("..")
install("pemGenertaR")
setwd("./pemGenertaR")
library(pemgeneratr)
?make_lines
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
?make_lines
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
?make_lines
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
?make_lines
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
library(pemgeneratr)
remove.packages("pemgeneratr")
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Install Package
setwd("..")
install("pemGenertaR")
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
model_gen <- function(traindat, target, outDir = ".") {
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
rmarkdown::render("./RMD/gen_model.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir),
output_dir = outDir)                ## where to save the report
}
model_gen <- function(traindat, target, outDir = ".") {
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
rmarkdown::render("./RMD/gen_model.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir),
output_dir = outDir)                ## where to save the report
}
dat <- read.csv("e:/workspace/2020/PEM/ALRF_PEMv2/dev/modDat.csv",
stringsAsFactors = TRUE)
target = "SiteSeries"
model_gen <- function(traindat, target, outDir = ".") {
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
rmarkdown::render("./RMD/gen_model.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir),
output_dir = outDir)                ## where to save the report
}
model_gen(traindat = dat,
target = "SiteSeries")
getwd()
model_gen <- function(traindat, target, outDir = ".") {
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
rmarkdown::render("./RMD/model_gen.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir),
output_dir = outDir)                ## where to save the report
}
dat <- read.csv("e:/workspace/2020/PEM/ALRF_PEMv2/dev/modDat.csv",
stringsAsFactors = TRUE)
model_gen(traindat = dat,
target = "SiteSeries")
seed
?seed
?set.seed
model_gen <- function(traindat, target, outDir = ".", rseed = NA) {
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
rmarkdown::render("./RMD/model_gen.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir,
rseed = NA),
output_dir = outDir)                ## where to save the report
}
model_gen <- function(traindat, target, outDir = ".", rseed = NA) {
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
rmarkdown::render("./RMD/model_gen.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir,
rseed = rseed),
output_dir = outDir)                ## where to save the report
}
system.time
system.time()
Sys.time()
as.integer(Sys.time())
model_gen <- function(traindat, target, outDir = ".", rseed = NA) {
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
rmarkdown::render("./RMD/model_gen.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir,
rseed = rseed),
output_dir = outDir)                ## where to save the report
}
dat <- read.csv("e:/workspace/2020/PEM/ALRF_PEMv2/dev/modDat.csv",
stringsAsFactors = TRUE)
model_gen(traindat = dat,
target = "SiteSeries")
model_gen(traindat = dat,
target = "SiteSeries",
rseed = 123)
dat <- read.csv("e:/workspace/2020/PEM/ALRF_PEMv2/dev/modDat.csv",
stringsAsFactors = TRUE)
model_gen(traindat = dat,
target = "SiteSeries",
rseed = 123)
?calculateConfusionMatrix
model_gen(traindat = dat,
target = "SiteSeries",
rseed = 123)
model_gen(traindat = dat,
target = "SiteSeries",
outDir = "e:/tmp/model_gen_test"
rseed = 123)
model_gen(traindat = dat,
target = "SiteSeries",
outDir = "e:/tmp/model_gen_test",
rseed = 123)
model_gen(traindat = dat,
target = "SiteSeries",
outDir = "e:/tmp/model_gen_test",
rseed = 123)
model_gen(traindat = dat,
target = "SiteSeries",
outDir = "e:/tmp/model_gen_test",
rseed = 123)
model_gen <- function(traindat, target, outDir = ".", rseed = NA) {
## create destination folder
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
## call report -- passing variables to it
rmarkdown::render("./RMD/model_gen.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir,
rseed = rseed),
output_dir = outDir)                ## where to save the report
## open the report
browseURL(paste(outDir, "model_gen.html", sep = "/"))
}
dat <- read.csv("e:/workspace/2020/PEM/ALRF_PEMv2/dev/modDat.csv",
stringsAsFactors = TRUE)
model_gen(traindat = dat,
target = "SiteSeries",
outDir = "e:/tmp/model_gen_test",
rseed = 123)
model_gen <- function(traindat, target, outDir = ".", rseed = NA) {
## create destination folder
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
## call report -- passing variables to it
rmarkdown::render("./RMD/model_gen.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir,
rseed = rseed),
output_dir = outDir)                ## where to save the report
## open the report
browseURL(paste(outDir, "model_gen.html", sep = "/"))
}
dat <- read.csv("e:/workspace/2020/PEM/ALRF_PEMv2/dev/modDat.csv",
stringsAsFactors = TRUE)
model_gen(traindat = dat,
target = "SiteSeries",
outDir = "e:/tmp/model_gen_test",
rseed = 456)
model_gen <- function(traindat, target, outDir = ".", rseed = NA) {
## create destination folder
ifelse(!dir.exists(file.path(outDir)),                # if folder does not exist
dir.create(file.path(outDir)), FALSE)         # create it
## call report -- passing variables to it
rmarkdown::render("./RMD/model_gen.Rmd",              ## where the rmd is located
params = list(traindat = traindat,  ## parameters to send to rmarkdown
target   = target,
outDir = outDir,
rseed = rseed),
output_dir = outDir)                ## where to save the report
## open the report
browseURL(paste(outDir, "model_gen.html", sep = "/"))
}
#'
#'
#' @param outDir  Where the report is to be saved.  This defaults to the project's root directory.
#' Additional products generated from the markdown script will also be saved to this dir.
#' @param traindat Is a dataframe that contains the model training data.  The reponse variable should be one of the columns.
#' @param target   The name of the response variable in the traindat data frame.
#' @param rseed    Optional Randomizer seed.
#' @keywords machine-learning, model, report
#' @export
#' @example
dat <- read.csv("e:/workspace/2020/PEM/ALRF_PEMv2/dev/modDat.csv",
stringsAsFactors = TRUE)
model_gen(traindat = dat,
target = "SiteSeries",
outDir = "e:/tmp/model_gen_test",
rseed = 456)
model_gen(traindat = dat,
target = "SiteSeries",
outDir = "e:/tmp/model_gen_test",
rseed = 456)
outDir <- "e:/tmp/model_gen_test/"
as.data.frame(files = list.files(outDir, full.names = TRUE))
fn <- as.data.frame(list.files(outDir, full.names = TRUE))
fn
names(fn) <- "File Names"
knitr::kable(fn)
#' @param traindat Is a dataframe that contains the model training data.  The reponse variable should be one of the columns.
#' @param target   The name of the response variable in the traindat data frame.
#' @param rseed    Optional Randomizer seed.
#' @keywords machine-learning, model, report
#' @export
#' @example
#' dat <- read.csv("e:/workspace/2020/PEM/ALRF_PEMv2/dev/modDat.csv",
#'                stringsAsFactors = TRUE)
#'
#'
model_gen(traindat = dat,
target = "SiteSeries",
outDir = "e:/tmp/model_gen_test",
rseed = 456)
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
install.packages("sf")
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
library(pemgeneratr)
?model_gem
?model_gen
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
### Testing
model <- "e:/tmp/model_gen_test/model.rds"
cov <- list.files("e:/tmpGIS/PEM_cvs/", pattern = "*.tif",full.names = TRUE)
cov <- cov[-(grep(cov, pattern = "xml"))]
name <- "Test"
outDir <- "e:/tmp/predict_landscape"
tilesize <- 1000
i <- 1
## Load the model
mod <- readRDS(model)
mod
mod$features
tiles <- pemgeneratr::tile_index(cov[1], tilesize)
t <- tiles[i,]  ## get tile
print(paste("working on ", i, "of", nrow(tiles)))
print("...")
## * load tile area---------
r <- stars::read_stars(cov,
RasterIO = list(nXOff  = t$offset.x[1]+1, ## hack -- stars and tile_maker issue??
nYOff  = t$offset.y[1]+1,
nXSize = t$region.dim.x[1],
nYSize = t$region.dim.y[1]))
## * update names ---------
## removes the .tif ending from names in stack
n <- names(r)
n <- gsub(".tif", "", n)
names(r) <- n
## Check names against model
setdiff(mod$features, names(r))
## Check names against model
setdiff(mod$features, names(r)) == 0
## Check names against model
length(setdiff(mod$features, names(r)))
## Check names against model
length(setdiff(mod$features, names(r))) == 0
