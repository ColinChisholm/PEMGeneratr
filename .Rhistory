rgdal::writeGDAL(r, out_tif, drivername = "GTiff")
r <- raster::raster(out_tif)
r
# r <- raster::raster(out_tif) ## conferming header details are intact
# r
extent(r)
# r <- raster::raster(out_tif) ## conferming header details are intact
# r
raster::extent(r)
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- "dtm_cropped.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
SAGApath <- "C:/SAGA/"
## Begin Function ################################################################
##### Link SAGA to R --------------------------------------------------
if(Sys.info()['sysname']=="Windows"){saga_cmd = paste0(SAGApath, "saga_cmd.exe")
} else {saga_cmd = "saga_cmd"}  ;
z<- system(paste(saga_cmd, "-v"), intern = TRUE)  ## prints that SAGA version number -- confirming it works.
print(z)
# OUTPUTS: ------------------------------------------------------------
## sets up tested file folders for all covariates
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), print("Directory Already Exisits"))        #create tmpOut
saga_tmp_files <- paste0(output,"/saga/")
ifelse(!dir.exists(file.path(saga_tmp_files)),              #if tmpOut Does not Exists
dir.create(file.path(saga_tmp_files)), print("Directory Already Exisits"))        #create tmpOut
## Create a SAGA version of the input file
r <- rgdal::readGDAL(input)
## tried this using SAGA's resample ... but lost alignment of rasters
r <- raster::raster(input)
??raster::disaggregate
??raster::aggregate
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
library(sf)
library(raster)
library(PEMgeneratr)
library(rgdal)
library(tmap)
aoi_raw <- st_read("../data/Block.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
aoi <- aoi_snap(aoi_raw)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_c.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
# aoi <- st_transform(aoi, crs(dtm))
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
writeRaster(dtm, "../data/dtm_cropped.tif", overwrite = TRUE )
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- "dtm_cropped.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
SAGApath <- "C:/SAGA/"
## Begin Function ################################################################
##### Link SAGA to R --------------------------------------------------
if(Sys.info()['sysname']=="Windows"){saga_cmd = paste0(SAGApath, "saga_cmd.exe")
} else {saga_cmd = "saga_cmd"}  ;
z<- system(paste(saga_cmd, "-v"), intern = TRUE)  ## prints that SAGA version number -- confirming it works.
print(z)
# OUTPUTS: ------------------------------------------------------------
## sets up tested file folders for all covariates
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), print("Directory Already Exisits"))        #create tmpOut
saga_tmp_files <- paste0(output,"/saga/")
ifelse(!dir.exists(file.path(saga_tmp_files)),              #if tmpOut Does not Exists
dir.create(file.path(saga_tmp_files)), print("Directory Already Exisits"))        #create tmpOut
# OUTPUTS: ------------------------------------------------------------
## sets up tested file folders for all covariates
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), print("Directory Already Exisits"))        #create tmpOut
saga_tmp_files <- paste0(output,"/saga/")
ifelse(!dir.exists(file.path(saga_tmp_files)),              #if tmpOut Does not Exists
dir.create(file.path(saga_tmp_files)), print("Directory Already Exisits"))        #create tmpOut
## tried this using SAGA's resample ... but lost alignment of rasters
r <- raster::raster(input)
raster::disaggregate()
?raster::disaggregate()
## Create a SAGA version of the input file
r <- rgdal::readGDAL(input)
outname <- gsub(".tif", ".sdat" , input)
rgdal::writeGDAL(r, paste(saga_tmp_files, outname, sep="/"), driver="SAGA")
saga_in <- paste(output, "saga", outname, sep = "/")  ## realtive filename of input saga file
## Begin loop through resolutions
for(i in resolution){
##Testing
i <- resolution[1]
outsuf <- paste0("_", i ,".sdat")  ## new file ending
saga_out <- gsub(".sdat", outsuf, outname)    ## extra care naming so that I can call these after
saga_outfull <- paste0(saga_tmp_files, saga_out)  ## pushes it to the saga sub-directory
sysCMD <- paste(saga_cmd, "grid_tools", "Resampling", "-TARGET_DEFINITION 0",
"-INPUT", saga_in,
"-KEEP_TYPE",  "true",
"-SCALE_UP",    5,  ## mean value
"-SCALE_DOWN",  3,  ## B-spline Interpolation
"-TARGET_USER_SIZE", i,  ## Output resolution
# "-TARGET_USER_FITS,  0", ## Fits to Nodes (1 would be cells)
"-OUTPUT", saga_outfull)
system(sysCMD)
### Create Sub-directory to final processed file
subdir <- paste(output, i, sep = "/")
# print(subdir)
ifelse(!dir.exists(file.path(subdir)),              #if tmpOut Does not Exists
dir.create(file.path(subdir)), print("Directory Already Exisits"))        #create tmpOut
## Save a geo-Tiff of the resolution
out_tif <- gsub(".sdat", ".tif", saga_out)
out_tif <- paste(subdir, out_tif, sep = "/")
r <- rgdal::readGDAL(saga_outfull)
rgdal::writeGDAL(r, out_tif, drivername = "GTiff")
# r <- raster::raster(out_tif) ## conferming header details are intact
# r
raster::extent(r)
## DO WE WANT TO START WITH 1m or the last resampled (i.e. 1 - > 5, 10, 25)
## ##### >> Resample to resolution  -----------------------------
# http://www.saga-gis.org/saga_tool_doc/7.2.0/ta_preprocessor_5.html
#
#               -ELEV" , sDTM,          # Input DTM
#                 "-FILLED", input,                                 # Output
#                 "-MINSLOPE ", 0.1                                       # Default Parameters
# )
# print(sysCMD)
# system(sysCMD)
#
}
r <- raster::raster(out_tif) ## conferming header details are intact
r
raster::extent(r)
rgdal::rawTransform()
?rgdal::rawTransform()
??rgdal
r
raster::extent(r)
dim(r)
raster::res(r)
## tried this using SAGA's resample ... but lost alignment of rasters
r <- raster::raster(input)
r
input <- "dtm_c.tif"
r
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- "dtm_c.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
SAGApath <- "C:/SAGA/"
## tried this using SAGA's resample ... but lost alignment of rasters
r <- raster::raster(input)
r <- raster::extent(r)
## tried this using SAGA's resample ... but lost alignment of rasters
r <- raster::raster(input)
raster::extent(r)
raster::res(r)
e <- raster::extent(r)
raster::raster()
raster::raster
??raster::raster
e <- as.vector(raster::extent(r))
e
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4])
res(target) <- 2.5
raster::res(target) <- 2.5
target
input <- "dtm_cropped.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
SAGApath <- "C:/SAGA/"
## tried this using SAGA's resample ... but lost alignment of rasters
r <- raster::raster(input)
e <- as.vector(raster::extent(r))
raster::res(r)
e
proj <- crs(r)
proj <- raster::crs(r)
proj
raster::projection(target) <-  raster::crs(r)
target
r2 <- raster::resample(r, target)
plot(r2)
raster::plot(r2)
raster::extent(r2)
library(raster)
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- "dtm_cropped.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
SAGApath <- "C:/SAGA/"
## Begin Function ################################################################
##### Link SAGA to R --------------------------------------------------
if(Sys.info()['sysname']=="Windows"){saga_cmd = paste0(SAGApath, "saga_cmd.exe")
} else {saga_cmd = "saga_cmd"}  ;
z<- system(paste(saga_cmd, "-v"), intern = TRUE)  ## prints that SAGA version number -- confirming it works.
print(z)
# OUTPUTS: ------------------------------------------------------------
## sets up tested file folders for all covariates
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), print("Directory Already Exisits"))        #create tmpOut
saga_tmp_files <- paste0(output,"/saga/")
ifelse(!dir.exists(file.path(saga_tmp_files)),              #if tmpOut Does not Exists
dir.create(file.path(saga_tmp_files)), print("Directory Already Exisits"))        #create tmpOut
## tried this using SAGA's resample ... but lost alignment of rasters
r <- raster::raster(input)
e <- as.vector(raster::extent(r))
e
proj <- raster::crs(r)
raster::res(r)
## create a target raster:: to tun the 1m to 2.5m raster -- contrained to the extent
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4]) ## empty raster
raster::res(target) <- 2.5 ## Makes target resolution 2.5m
raster::projection(target) <-  raster::crs(r)
target
e
r2 <- raster::resample(r, target)
raster::extent(r2)
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- "dtm_cropped.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
SAGApath <- "C:/SAGA/"
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- "dtm_cropped.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
# OUTPUTS: ------------------------------------------------------------
## sets up tested file folders for all covariates
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), print("Directory Already Exisits"))        #create tmpOut
## tried this using SAGA's resample ... but lost alignment of rasters
## Load input and get information from it
r <- raster::raster(input)
e <- as.vector(raster::extent(r))
e
# e
proj <- raster::crs(r)
raster::res(r)
##Testing
i <- resolution[1]
## create a target raster:: to tun the 1m to 2.5m raster -- contrained to the extent
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4]) ## empty raster
raster::res(target) <- i ## Makes target resolution 2.5m
raster::projection(target) <-  raster::crs(r)
target
r2 <- raster::resample(r, target)  ## resamples the DTM to the target needed
outdir <- paste(output, i, sep = "/")
outdir <- paste(output, i, sep = "/")
ifelse(!dir.exists(file.path(outdir)),              #if tmpOut Does not Exists
dir.create(file.path(outdir)), "Directory Already Exisits")        #create tmpOut
r
r["names"]
r[["names"]]
str(r)
r@data@names[1]
outname <- r@data@name2[1]
outsuf <- paste0("_", i, ".tif")
outname <- gsub(".tif", outsuf)
## Name Adjustments
outname <- r@data@name2[1]
outsuf <- paste0("_", i, ".tif")
outname <- gsub(".tif", outsuf)
outname <- gsub(".tif", outsuf, outname)
## Name Adjustments
outname <- r@data@name2[1]
## Name Adjustments
outname <- r@data@names[1]
outsuf <- paste0("_", i, ".tif")
outname <- gsub(".tif", outsuf, outname)
writeRaster(r2, paste(outdir, outname, sep = "/"))
raster::writeRaster(r2, paste(outdir, outname, sep = "/"))
r <- r2
raster::writeRaster(r2, paste(outdir, outname, sep = "/"), overwrite = TRUE)
for(i in resolution){
##Testing
# i <- resolution[1]
## create a target raster:: to tun the 1m to 2.5m raster -- contrained to the extent
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4]) ## empty raster
raster::res(target) <- i ## Makes target resolution
raster::projection(target) <-  raster::crs(r)
target
r2 <- raster::resample(r, target)  ## resamples the DTM to the target specified
# raster::plot(r2)
# raster::extent(r2)
outdir <- paste(output, i, sep = "/")
ifelse(!dir.exists(file.path(outdir)),              #if tmpOut Does not Exists
dir.create(file.path(outdir)), "Directory Already Exisits")        #create tmpOut
## Name Adjustments
outname <- input@data@names[1]
outsuf <- paste0("_", i, ".tif")
outname <- gsub(".tif", outsuf, outname)
raster::writeRaster(r2, paste(outdir, outname, sep = "/"), overwrite = TRUE)
r <- r2 ## reassigning raster for resampling -- step-wise resampling instead of resamping all from original.
}
##Testing
i <- resolution[2]
## create a target raster:: to tun the 1m to 2.5m raster -- contrained to the extent
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4]) ## empty raster
raster::res(target) <- i ## Makes target resolution
raster::projection(target) <-  raster::crs(r)
target
r2 <- raster::resample(r, target)  ## resamples the DTM to the target specified
outdir <- paste(output, i, sep = "/")
ifelse(!dir.exists(file.path(outdir)),              #if tmpOut Does not Exists
dir.create(file.path(outdir)), "Directory Already Exisits")        #create tmpOut
## Name Adjustments
outname <- input@data@names[1]
input <- raster::raster("dtm_cropped.tif")
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
# OUTPUTS: ------------------------------------------------------------
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), "Directory Already Exisits")        #create tmpOut
## tried this using SAGA's resample ... but lost alignment of rasters
## Load input and get information from it
r <- input
e <- as.vector(raster::extent(r))
# e
proj <- raster::crs(r)
raster::res(r)
##Testing
i <- resolution[2]
## create a target raster:: to tun the 1m to 2.5m raster -- contrained to the extent
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4]) ## empty raster
raster::res(target) <- i ## Makes target resolution
raster::projection(target) <-  raster::crs(r)
target
r2 <- raster::resample(r, target)  ## resamples the DTM to the target specified
outdir <- paste(output, i, sep = "/")
ifelse(!dir.exists(file.path(outdir)),              #if tmpOut Does not Exists
dir.create(file.path(outdir)), "Directory Already Exisits")        #create tmpOut
## Name Adjustments
outname <- input@data@names[1]
outsuf <- paste0("_", i, ".tif")
outname <- gsub(".tif", outsuf, outname)
raster::writeRaster(r2, paste(outdir, outname, sep = "/"), overwrite = TRUE)
r <- r2 ## reassigning raster for resampling -- step-wise resampling instead of resamping all from original.
##Testing
i <- resolution[3]
## create a target raster:: to tun the 1m to 2.5m raster -- contrained to the extent
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4]) ## empty raster
raster::res(target) <- i ## Makes target resolution
raster::projection(target) <-  raster::crs(r)
target
r2 <- raster::resample(r, target)  ## resamples the DTM to the target specified
outdir <- paste(output, i, sep = "/")
ifelse(!dir.exists(file.path(outdir)),              #if tmpOut Does not Exists
dir.create(file.path(outdir)), "Directory Already Exisits")        #create tmpOut
## Name Adjustments
outname <- input@data@names[1]
outsuf <- paste0("_", i, ".tif")
outname <- gsub(".tif", outsuf, outname)
raster::writeRaster(r2, paste(outdir, outname, sep = "/"), overwrite = TRUE)
r <- r2 ## reassigning raster for resampling -- step-wise resampling instead of resamping all from original.
##Testing
i <- resolution[4]
## create a target raster:: to tun the 1m to 2.5m raster -- contrained to the extent
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4]) ## empty raster
raster::res(target) <- i ## Makes target resolution
raster::projection(target) <-  raster::crs(r)
target
r2 <- raster::resample(r, target)  ## resamples the DTM to the target specified
outdir <- paste(output, i, sep = "/")
ifelse(!dir.exists(file.path(outdir)),              #if tmpOut Does not Exists
dir.create(file.path(outdir)), "Directory Already Exisits")        #create tmpOut
## Name Adjustments
outname <- input@data@names[1]
outsuf <- paste0("_", i, ".tif")
outname <- gsub(".tif", outsuf, outname)
raster::writeRaster(r2, paste(outdir, outname, sep = "/"), overwrite = TRUE)
r <- r2 ## reassigning raster for resampling -- step-wise resampling instead of resamping all from original.
outname
outname <- paste0(outname, ".tif")
outname
raster::writeRaster(r2, paste(outdir, outname, sep = "/"), overwrite = TRUE)
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- raster::raster("dtm_cropped.tif")
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
# OUTPUTS: ------------------------------------------------------------
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), "Directory Already Exisits")        #create tmpOut
## tried this using SAGA's resample ... but lost alignment of rasters
## Load input and get information from it
r <- input
e <- as.vector(raster::extent(r))
# e
proj <- raster::crs(r)
raster::res(r)
for(i in resolution){
##Testing
# i <- resolution[4]
## create a target raster:: to tun the 1m to 2.5m raster -- contrained to the extent
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4]) ## empty raster
raster::res(target) <- i ## Makes target resolution
raster::projection(target) <-  raster::crs(r)
target
r2 <- raster::resample(r, target)  ## resamples the DTM to the target specified
# raster::plot(r2)
# raster::extent(r2)
outdir <- paste(output, i, sep = "/")
ifelse(!dir.exists(file.path(outdir)),              #if tmpOut Does not Exists
dir.create(file.path(outdir)), "Directory Already Exisits")        #create tmpOut
## Name Adjustments
outname <- input@data@names[1]
outsuf <- paste0("_", i, ".tif")
outname <- paste0(outname, ".tif")
raster::writeRaster(r2, paste(outdir, outname, sep = "/"), overwrite = TRUE)
r <- r2 ## reassigning raster for resampling -- step-wise resampling instead of resamping all from original.
}
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- raster::raster("dtm_cropped.tif")
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
# OUTPUTS: ------------------------------------------------------------
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), "Directory Already Exisits")        #create tmpOut
## tried this using SAGA's resample ... but lost alignment of rasters
## Load input and get information from it
r <- input
e <- as.vector(raster::extent(r))
# e
proj <- raster::crs(r)
raster::res(r)
for(i in resolution){
##Testing
# i <- resolution[4]
## create a target raster:: to tun the 1m to 2.5m raster -- contrained to the extent
target <- raster::raster(ncol=10, nrow=10, xmn=e[1], xmx=e[2], ymn=e[3], ymx=e[4]) ## empty raster
raster::res(target) <- i ## Makes target resolution
raster::projection(target) <-  raster::crs(r)
target
r2 <- raster::resample(r, target)  ## resamples the DTM to the target specified
# raster::plot(r2)
# raster::extent(r2)
outdir <- paste(output, i, sep = "/")
ifelse(!dir.exists(file.path(outdir)),              #if tmpOut Does not Exists
dir.create(file.path(outdir)), "Directory Already Exisits")        #create tmpOut
## Name Adjustments
outname <- input@data@names[1]
outsuf <- paste0("_", i, ".tif")
outname <- paste0(outname, outsuf)
raster::writeRaster(r2, paste(outdir, outname, sep = "/"), overwrite = TRUE)
r <- r2 ## reassigning raster for resampling -- step-wise resampling instead of resamping all from original.
}
library(raster)
list.files("CoVars/", pattern = "*.tif", recursive = TRUE, full.names = TRUE)
l <- list.files("CoVars/", pattern = "*.tif", recursive = TRUE, full.names = TRUE)
raster(l[1])
extent(l[1])
l <- list.files("CoVars/", pattern = "*.tif", recursive = TRUE, full.names = TRUE)
l <- list.files("CoVars/", pattern = "*.tif", recursive = TRUE, full.names = TRUE)
for(i in l){
c <- raster(l[i])
as.vector(extent(c))
}
library(raster)
l <- list.files("CoVars/", pattern = "*.tif", recursive = TRUE, full.names = TRUE)
c <- raster(l[i])
for(i in l){
c <- raster(i)
as.vector(extent(c))
}
for(i in l){
c <- raster(i)
print(as.vector(extent(c)))
}
