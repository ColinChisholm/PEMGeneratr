}
cv_summary
## Get list of files
l <- list.files(path = output_CoVars, pattern = "*.tif",
recursive = TRUE)
l <- l[!grepl(".xml", l)] ## removes xmls from the list
## Create an empty dataframe to hold the values
n <- length(l)
cv_summary <- data.frame(File = character(n),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
for(i in 1:length(l)){
# i <- 1
# print(l[i])
cv_summary$File[i] <- l[i]
r <- raster(paste(output_CoVars, l[i], sep = "/"))
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary
i <- 1
# print(l[i])
cv_summary$File[i] <- l[i]
l[i]
cv_summary <- tibble(File = character(n),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
for(i in 1:length(l)){
# i <- 1
# print(l[i])
cv_summary$File[i] <- l[i]
r <- raster(paste(output_CoVars, l[i], sep = "/"))
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary
## Create list of covariate files.
l <- list.files("e:/tmp/5/", pattern = "*.tif", full.names = TRUE)
l <- append(l, list.files("e:/tmp/10/", pattern = "*.tif", full.names = TRUE))
l <- append(l, list.files("e:/tmp/25/", pattern = "*.tif", full.names = TRUE))
## Push list to fine resolution.
cv_FineRes(inputFileList = l, output = "e:/tmp/2.5_others", targetRes = 2.5)
## Get list of files
l <- list.files(path = "e:/tmp/2.5", pattern = "*.tif",
recursive = TRUE, full.names = TRUE)
l <- append(l, list.files(path = "e:/tmp/2.5_others", pattern = "*.tif",
recursive = TRUE,  full.names = TRUE))
l <- l[!grepl(".xml", l)] ## removes xmls from the list
l
## Create an empty dataframe to hold the values
n <- length(l)
cv_summary <- tibble(File = character(n),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
for(i in 1:length(l)){
# i <- 1
# print(l[i])
cv_summary$File[i] <- l[i]
r <- raster(paste(output_CoVars, l[i], sep = "/"))
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
for(i in 1:length(l)){
i <- 1
# print(l[i])
cv_summary$File[i] <- l[i]
r <- raster(l[i], sep = "/")
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary
## Get list of files
l <- list.files(path = "e:/tmp/2.5", pattern = "*.tif",
recursive = TRUE, full.names = TRUE)
l <- append(l, list.files(path = "e:/tmp/2.5_others", pattern = "*.tif",
recursive = TRUE,  full.names = TRUE))
l <- l[!grepl(".xml", l)] ## removes xmls from the list
## Create an empty dataframe to hold the values
n <- length(l)
cv_summary <- tibble(File = character(n),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
# print(l[i])
cv_summary$File[i] <- l[i]
for(i in 1:length(l)){
# print(l[i])
cv_summary$File[i] <- l[i]
r <- raster(l[i], sep = "/")
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary
## Create an empty dataframe to hold the values
n <- length(l)
cv_summary <- tibble(File = character(basename(l)),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
rm(l)
## Get list of files
l <- list.files(path = "e:/tmp/2.5", pattern = "*.tif",
recursive = TRUE, full.names = TRUE)
l <- append(l, list.files(path = "e:/tmp/2.5_others", pattern = "*.tif",
recursive = TRUE,  full.names = TRUE))
l <- l[!grepl(".xml", l)] ## removes xmls from the list
## Create an empty dataframe to hold the values
n <- length(l)
cv_summary <- tibble(File = character(basename(l)),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
cv_summary <- tibble(File = l,
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
for(i in 1:length(l)){
# print(l[i])
cv_summary$File[i] <- l[i]
r <- raster(l[i], sep = "/")
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary
cv_summary <- tibble(File = basename(l),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
for(i in 1:length(l)){
# print(l[i])
cv_summary$File[i] <- l[i]
r <- raster(l[i], sep = "/")
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary
basename(l)
rm(cv_summary)
cv_summary <- tibble(File = basename(l),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
cv_summary
for(i in 1:length(l)){
# print(l[i])
r <- raster(l[i], sep = "/")
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary
sort(l)
?sort
cv_summary[order(File),]
cv_summary[order(cv_summary$File),]
source('E:/workspace/2019/PEM_2020/SetupMaintenance_PEMgeneratr.R')
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
# Chunk 2
library(tidyverse)
library(sf)
library(raster)
library(rgdal)
library(tmap)
library(PEMgeneratr) ## OUR NEW PACKAGE
# Chunk 3
aoi_raw <- st_read("../data/block.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
e <- st_sfc(e)
aoi <- aoi_snap(aoi_raw)
# Chunk 4
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use in map below
dim(dtm); extent(dtm)
# Chunk 5
# aoi <- st_transform(aoi, crs(dtm))
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
# writeRaster(dtm, "../data/dtm_cropped.tif", overwrite = TRUE )
# Chunk 6
e$name <- "Original AOI"
aoi$name <- "Adjusted AOI"
dtm_e$name <- "Original DTM extent"
tm_shape(dtm_e) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "red", lwd = 2) +
tm_shape(dtm) + tm_raster(title = "DTM: Elevation", style = "cont") +
tm_shape(e) + tm_fill(col = "name",  alpha = 0, title = "") +
tm_borders(col = "green", lwd = 2.0) +
tm_shape(aoi) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "blue", lwd = 2) +
tm_layout(legend.outside = TRUE, frame = FALSE)
outputFolder <- "e:/tmp/dtms"
multi_res(dtm, output = outputFolder, resolution = c(2.5, 5, 10, 25))
# confirms same extent
l <- list.files(outputFolder, pattern = "*.tif", recursive = TRUE, full.names = TRUE)
for(i in l){
# i <- l[1]
c <- raster(i)
print(i)
print("Resolution")
print(res(c))
print(as.vector(extent(c)))
}
output_CoVars <- "e:/tmp" ## where to place the covariates
l <- list.files(outputFolder, recursive = TRUE, full.names = TRUE) ## list of DTMs to process
if(!dir.exists(output_CoVars)){## skip this if they are already generated -- for easier report generation.
for(i in l){  ## Loop through Resolutions and produce covariates
# i<-l[1] ##testing
print(i)
dtm <- raster(i)
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = output_CoVars)
}
}
for(i in l){  ## Loop through Resolutions and produce covariates
# i<-l[1] ##testing
print(i)
dtm <- raster(i)
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = output_CoVars)
}
## Get list of files
l <- list.files(path = output_CoVars, pattern = "*.tif",
recursive = TRUE)
l <- l[!grepl(".xml", l)] ## removes xmls from the list
## Create an empty dataframe to hold the values
n <- length(l)
cv_summary <- tibble(File = character(n),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
for(i in 1:length(l)){
# i <- 1
# print(l[i])
cv_summary$File[i] <- l[i]
r <- raster(paste(output_CoVars, l[i], sep = "/"))
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary[order(cv_summary$File)]
cv_summary[order(cv_summary$File),]
# print(l[i])
cv_summary$File[i] <- basename(l[i])
for(i in 1:length(l)){
# i <- 1
# print(l[i])
cv_summary$File[i] <- basename(l[i])
r <- raster(paste(output_CoVars, l[i], sep = "/"))
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary[order(cv_summary$File),]
## Push list to fine resolution.
if(!dir.exists("e:/tmp/2.5_others")){"DO IT"}
## Create list of covariate files.
l <- list.files("e:/tmp/5/", pattern = "*.tif", full.names = TRUE)
l <- append(l, list.files("e:/tmp/10/", pattern = "*.tif", full.names = TRUE))
l <- append(l, list.files("e:/tmp/25/", pattern = "*.tif", full.names = TRUE))
## Push list to fine resolution.
if(!dir.exists("e:/tmp/2.5_others")){
cv_FineRes(inputFileList = l, output = "e:/tmp/2.5_others", targetRes = 2.5)
}
## Create list of covariate files.
l <- list.files("e:/tmp/5/", pattern = "*.tif", full.names = TRUE)
l <- append(l, list.files("e:/tmp/10/", pattern = "*.tif", full.names = TRUE))
l <- append(l, list.files("e:/tmp/25/", pattern = "*.tif", full.names = TRUE))
## Push list to fine resolution.
if(!dir.exists("e:/tmp/2.5_others")){
cv_FineRes(inputFileList = l, output = "e:/tmp/2.5_others", targetRes = 2.5)
}
cv_FineRes(inputFileList = l, output = "e:/tmp/2.5_others", targetRes = 2.5)
l
cv_FineRes <- function(inputFileList, output = "e:/tmp/2.5", targetRes = 2.5){
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output), recursive = TRUE), "Directory Already Exisits")        #create tmpOut
for(i in inputFileList){
### testing parms
# i  <- inputFileList[1]
# targetRes <- 2.5
# output = "e:/tmp/2.5/"
print(paste("Processing:", i))
r  <- raster::raster(i)
px <- raster::res(r)[1]
r  <- raster::disaggregate(r, px/targetRes)  ## This will through an error if not an integer
raster::writeRaster(r, paste(output, basename(i), sep = "/"), overwrite = TRUE)
}
}
cv_FineRes(inputFileList = l, output = "e:/tmp/2.5_others", targetRes = 2.5)
## Get list of files
l <- list.files(path = "e:/tmp/2.5", pattern = "*.tif",
recursive = TRUE, full.names = TRUE)
l <- append(l, list.files(path = "e:/tmp/2.5_others", pattern = "*.tif",
recursive = TRUE,  full.names = TRUE))
l <- l[!grepl(".xml", l)] ## removes xmls from the list
## Create an empty dataframe to hold the values
n <- length(l)
cv_summary <- tibble(File = basename(l),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
for(i in 1:length(l)){
# print(l[i])
r <- raster(l[i], sep = "/")
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary[order(cv_summary$File),]
cvs <- stack(l)
names(cvs)
aoi_raw <- st_read("../data/block.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
e <- st_sfc(e)
aoi <- aoi_snap(aoi_raw)
aoi_raw <- st_read("../data/block.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
e <- st_sfc(e)
aoi <- aoi_snap(aoi_raw)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
# Chunk 2
library(tidyverse)
library(sf)
library(raster)
library(rgdal)
library(tmap)
library(PEMgeneratr) ## OUR NEW PACKAGE
# Chunk 3
aoi_raw <- st_read("../data/block.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
e <- st_sfc(e)
aoi <- aoi_snap(aoi_raw)
# Chunk 4
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use in map below
dim(dtm); extent(dtm)
# Chunk 5
# aoi <- st_transform(aoi, crs(dtm))
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
# writeRaster(dtm, "../data/dtm_cropped.tif", overwrite = TRUE )
# Chunk 6
e$name <- "Original AOI"
aoi$name <- "Adjusted AOI"
dtm_e$name <- "Original DTM extent"
tm_shape(dtm_e) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "red", lwd = 2) +
tm_shape(dtm) + tm_raster(title = "DTM: Elevation", style = "cont") +
tm_shape(e) + tm_fill(col = "name",  alpha = 0, title = "") +
tm_borders(col = "green", lwd = 2.0) +
tm_shape(aoi) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "blue", lwd = 2) +
tm_layout(legend.outside = TRUE, frame = FALSE)
# Chunk 7
outputFolder <- "e:/tmp/dtms"
multi_res(dtm, output = outputFolder, resolution = c(2.5, 5, 10, 25))
# confirms same extent
l <- list.files(outputFolder, pattern = "*.tif", recursive = TRUE, full.names = TRUE)
for(i in l){
# i <- l[1]
c <- raster(i)
print(i)
print("Resolution")
print(res(c))
print(as.vector(extent(c)))
}
# Chunk 8
output_CoVars <- "e:/tmp" ## where to place the covariates
l <- list.files(outputFolder, recursive = TRUE, full.names = TRUE) ## list of DTMs to process
if(!dir.exists(output_CoVars)){## skip this if they are already generated -- for easier report generation.
for(i in l){  ## Loop through Resolutions and produce covariates
# i<-l[1] ##testing
print(i)
dtm <- raster(i)
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = output_CoVars)
}
}
# Chunk 9
## Get list of files
l <- list.files(path = output_CoVars, pattern = "*.tif",
recursive = TRUE)
l <- l[!grepl(".xml", l)] ## removes xmls from the list
## Create an empty dataframe to hold the values
n <- length(l)
cv_summary <- tibble(File = character(n),
xmin = numeric(n),
xmax = numeric(n),
ymin = numeric(n),
ymax = numeric(n),
res  = numeric(n)
)
for(i in 1:length(l)){
# i <- 1
# print(l[i])
cv_summary$File[i] <- basename(l[i])
r <- raster(paste(output_CoVars, l[i], sep = "/"))
e <- as.vector(extent(r))
cv_summary$xmin[i] <- e[1]
cv_summary$xmax[i] <- e[2]
cv_summary$ymin[i] <- e[3]
cv_summary$ymax[i] <- e[4]
cv_summary$res[i]  <- res(r)[1]
}
cv_summary[order(cv_summary$File),]
# Chunk 10
## Create list of covariate files.
l <- list.files("e:/tmp/5/", pattern = "*.tif", full.names = TRUE)
l <- append(l, list.files("e:/tmp/10/", pattern = "*.tif", full.names = TRUE))
l <- append(l, list.files("e:/tmp/25/", pattern = "*.tif", full.names = TRUE))
## Push list to fine resolution.
if(!dir.exists("e:/tmp/2.5_others")){
cv_FineRes(inputFileList = l, output = "e:/tmp/2.5_others", targetRes = 2.5)
}
source('E:/workspace/2019/PEM_2020/SetupMaintenance_PEMgeneratr.R')
library(kable)
install.packages("kableExtras")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
# Chunk 2
library(tidyverse)
library(sf)
library(raster)
library(rgdal)
library(tmap)
library(PEMgeneratr) ## OUR NEW PACKAGE
install.packages("knitrExtras")
install.packages("knitrExtra")
devtools::install_github("haozhu233/kableExtra")
library(kableExtra)
?PEMgenatr
??PEMgeneratr
?PEMgeneratr
??PEMgeneratr
?aoi_snap
