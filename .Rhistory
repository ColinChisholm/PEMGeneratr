#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=-122, xmx=-121, ymn=54, ymx=54.5)
raster::crs(r1, "+proj=longlat +datum=WGS84 +no_defs" )
r1 <- raster::setValues(r1, seq(1:length(r1)))
raster::writeRaster(r1, "e:/tmp/tmp2.tif", overwrite = TRUE)
# ## testing
rFile <- "e:/tmp/tmp2.tif"
r <- rgdal::GDALinfo(rFile)
r
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 20)
tiles
raster::raster(rTile)
raster::raster(rFile)
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=552000, xmx=557000, ymn=5980000, ymx=5985000)
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=552000, xmx=557000, ymn=5980000, ymx=5985000)
raster::crs(r1, "+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs " )
r1 <- raster::setValues(r1, seq(1:length(r1)))
raster::writeRaster(r1, "e:/tmp/tmp2.tif", overwrite = TRUE)
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 20)
mapview::mapview(r1, alpha = 0.5)
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=552000, xmx=557000, ymn=5980000, ymx=5985000)
raster::crs(r1, "+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs " )
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=552000, xmx=557000, ymn=5980000, ymx=5985000)
raster::crs(r1, "+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ")
raster::crs(r1, "+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
raster::crs(r1, "+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
raster::crs(r1, "+init=EPSG:3157")
raster::CRS(r1, "+init=EPSG:3157")
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=552000, xmx=557000, ymn=5980000, ymx=5985000)
r1
r1 <- raster::crs("+init=EPSG:3157")
r1 <- raster::setValues(r1, seq(1:length(r1)))
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=552000, xmx=557000, ymn=5980000, ymx=5985000)
raster::crs(r1) <- "+init=EPSG:"
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=552000, xmx=557000, ymn=5980000, ymx=5985000)
raster::crs(r1) <- "+init=EPSG:3157"
r1 <- raster::setValues(r1, seq(1:length(r1)))
raster::writeRaster(r1, "e:/tmp/tmp2.tif", overwrite = TRUE)
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 20)
mapview::mapview(r1, alpha = 0.5)
# ## testing
cv_list <- list.files("e:/tmpGIS/PEM_cvs/", pattern = "*.tif",full.names = TRUE)
cv_list <- cv_list[-(grep(cv_list, pattern = "xml"))] ## drop any associated xml files
# ## testing
cv_list <- list.files("e:/tmpGIS/PEM_cvs/", pattern = "*.tif",full.names = TRUE)
cv_list <- cv_list[-(grep(cv_list, pattern = "xml"))] ## drop any associated xml files
cv1 <- GDALinfo(cv_list[1])
cv1 <- rgdal::GDALinfo(cv_list[1])
cv1
r1
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=547000, xmx=552000, ymn=5980000, ymx=5985000)
raster::crs(r1) <- "+init=EPSG:3157"
r1 <- raster::setValues(r1, seq(1:length(r1)))
raster::writeRaster(r1, "e:/tmp/tmp2.tif", overwrite = TRUE)
mapview::mapview(r1, alpha = 0.5)
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=547000, xmx=552000, ymn=5985000, ymx=5990000)
raster::crs(r1) <- "+init=EPSG:3157"
r1 <- raster::setValues(r1, seq(1:length(r1)))
raster::writeRaster(r1, "e:/tmp/tmp2.tif", overwrite = TRUE)
mapview::mapview(r1, alpha = 0.5)
cv1
pxCount = 1000
r <- cv1
p_tiles <- GSIF::getSpatialTiles(r, block.x = pxCount, return.SpatialPolygons = TRUE)
r <- rgdal::GDALinfo(rFile)
p_tiles <- GSIF::getSpatialTiles(r, block.x = pxCount, return.SpatialPolygons = TRUE)
#overlap.percent = Buffer / pxCount *100) ## add later
p_tiles <- sf::st_as_sf(p_tiles)
p_tiles$id <- seq(1:nrow(p_tiles))
t_tiles <- GSIF::getSpatialTiles(r, block.x = pxCount, return.SpatialPolygons = FALSE)
t_tiles$id <- seq(1:nrow(t_tiles))
p_tiles <- dplyr::left_join(p_tiles, t_tiles)
mapview::mapview(p_tiles)
cv1
str(cv1)
cv1[6]
r1[6]
r[6]
pxCount = 100 * r1[6]
pxCount = 100 / r1[6]
pxCount = 100 * r1[6]
r1[6]
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
r1 <- raster::raster(ncol=200, nrow=200, xmn=547000, xmx=552000, ymn=5985000, ymx=5990000)
raster::crs(r1) <- "+init=EPSG:3157"
r1 <- raster::setValues(r1, seq(1:length(r1)))
raster::writeRaster(r1, "e:/tmp/tmp2.tif", overwrite = TRUE)
pxCount = 100
rFile <- "e:/tmp/tmp2.tif"
dist <- pxCount * r1[6] ## GSIF uses a distance for the tile ... not pixel count
r <- rgdal::GDALinfo(rFile)
r
r[6]
pxCount
dist <- pxCount * r1[6] ## GSIF uses a distance for the tile ... not pixel count
r <- rgdal::GDALinfo(rFile)
p_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = TRUE)
#overlap.percent = Buffer / pxCount *100) ## add later
p_tiles <- sf::st_as_sf(p_tiles)
p_tiles$id <- seq(1:nrow(p_tiles))
t_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = FALSE)
t_tiles$id <- seq(1:nrow(t_tiles))
p_tiles <- dplyr::left_join(p_tiles, t_tiles)
p_tiles
# GSIF requires a GDAL object
tile_index <- function(rFile, pxCount){
# # ## testing
#
# pxCount = 100
# rFile <- "e:/tmp/tmp2.tif"
#
dist <- pxCount * r1[6] ## GSIF uses a distance for the tile ... not pixel count
r <- rgdal::GDALinfo(rFile)
p_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = TRUE)
#overlap.percent = Buffer / pxCount *100) ## add later
p_tiles <- sf::st_as_sf(p_tiles)
p_tiles$id <- seq(1:nrow(p_tiles))
t_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = FALSE)
t_tiles$id <- seq(1:nrow(t_tiles))
p_tiles <- dplyr::left_join(p_tiles, t_tiles)
return(p_tiles)
}
# call function
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 200)
# call function
tiles <- tile_index("e:/tmp/tmp2.tif", pxCount = 200)
mapview::mapview(tiles, alpha = 0.5)
raster::writeRaster(r1, "e:/tmp/tmp.tif", overwrite = TRUE)
# call function
tiles <- tile_index("e:/tmp/tmp1.tif", pxCount = 100)
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
# Create an raster example
r1 <- raster::raster(ncol=200, nrow=200, xmn=547000, xmx=552000, ymn=5985000, ymx=5990000)
raster::crs(r1) <- "+init=EPSG:3157"
r1 <- raster::setValues(r1, seq(1:length(r1)))
raster::writeRaster(r1, "e:/tmp/tmp.tif", overwrite = TRUE)
# call function
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 100)
# GSIF requires a GDAL object
tile_index <- function(rFile, pxCount){
# # ## testing
#
# pxCount = 100
# rFile <- "e:/tmp/tmp2.tif"
#
dist <- pxCount * r1[6] ## GSIF uses a distance for the tile ... not pixel count
r <- rgdal::GDALinfo(rFile)
p_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = TRUE)
#overlap.percent = Buffer / pxCount *100) ## add later
p_tiles <- sf::st_as_sf(p_tiles)
p_tiles$id <- seq(1:nrow(p_tiles))
t_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = FALSE)
t_tiles$id <- seq(1:nrow(t_tiles))
p_tiles <- dplyr::left_join(p_tiles, t_tiles)
return(p_tiles)
}
# call function
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 100)
mapview::mapview(tiles, alpha = 0.5)
tiles
# GSIF requires a GDAL object
tile_index <- function(rFile, pxCount){
# # ## testing
#
# pxCount = 100
# rFile <- "e:/tmp/tmp2.tif"
#
dist <- pxCount #* r1[6] ## GSIF uses a distance for the tile ... not pixel count
r <- rgdal::GDALinfo(rFile)
p_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = TRUE)
#overlap.percent = Buffer / pxCount *100) ## add later
p_tiles <- sf::st_as_sf(p_tiles)
p_tiles$id <- seq(1:nrow(p_tiles))
t_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = FALSE)
t_tiles$id <- seq(1:nrow(t_tiles))
p_tiles <- dplyr::left_join(p_tiles, t_tiles)
return(p_tiles)
}
# call function
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 100)
mapview::mapview(tiles, alpha = 0.5)
head(tiles)
# GSIF requires a GDAL object
tile_index <- function(rFile, pxCount){
# # ## testing
#
# pxCount = 100
# rFile <- "e:/tmp/tmp2.tif"
#
r <- rgdal::GDALinfo(rFile)
dist <- pxCount * r[6] ## GSIF uses a distance for the tile ... not pixel count
p_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = TRUE)
#overlap.percent = Buffer / pxCount *100) ## add later
p_tiles <- sf::st_as_sf(p_tiles)
p_tiles$id <- seq(1:nrow(p_tiles))
t_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = FALSE)
t_tiles$id <- seq(1:nrow(t_tiles))
p_tiles <- dplyr::left_join(p_tiles, t_tiles)
return(p_tiles)
}
# GSIF requires a GDAL object
tile_index <- function(rFile, pxCount){
# # ## testing
#
# pxCount = 100
# rFile <- "e:/tmp/tmp2.tif"
#
r <- rgdal::GDALinfo(rFile)
dist <- pxCount * r[6] ## GSIF uses a distance for the tile ... not pixel count
p_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = TRUE)
#overlap.percent = Buffer / pxCount *100) ## add later
p_tiles <- sf::st_as_sf(p_tiles)
p_tiles$id <- seq(1:nrow(p_tiles))
t_tiles <- GSIF::getSpatialTiles(r, block.x = dist, return.SpatialPolygons = FALSE)
t_tiles$id <- seq(1:nrow(t_tiles))
p_tiles <- dplyr::left_join(p_tiles, t_tiles)
return(p_tiles)
}
#' Tile index.
#'
#' Creates a tile index of a raster or raster stack
#'
#'
#'
# Create an raster example
r1 <- raster::raster(ncol=200, nrow=200, xmn=547000, xmx=552000, ymn=5985000, ymx=5990000)
raster::crs(r1) <- "+init=EPSG:3157"
r1 <- raster::setValues(r1, seq(1:length(r1)))
raster::writeRaster(r1, "e:/tmp/tmp.tif", overwrite = TRUE)
# call function
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 100)
mapview::mapview(tiles, alpha = 0.5)
# call function
tiles <- tile_index("e:/tmp/tmp.tif", pxCount = 50)
mapview::mapview(tiles, alpha = 0.5)
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2019/PEM_2020/")
## Compile Documentation -------------------------------
setwd("./PEMWorkFlow/")
document()
## Install Package
setwd("..")
install("PEMWorkFlow")
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2019/PEM_2020/")
## Compile Documentation -------------------------------
setwd("./PEMWorkFlow/")
document()
## Install Package
setwd("..")
install("PEMWorkFlow")
## Compile Documentation -------------------------------
setwd("./PEMWorkFlow/")
## Install Package
setwd("..")
install("PEMWorkFlow")
#
# create("PEMWorkFlow")
setwd("e:/workspace/2019/PEM_2020/")
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2019/PEM_2020/")
## Compile Documentation -------------------------------
setwd("./PEMWorkFlow/")
## Install Package
setwd("..")
install("PEMWorkFlow")
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
install.packages("SpaDES.tools")
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
install.packages("GSIF")
install.packages("SpaDES.tools")
document()
## Install Package
setwd("..")
install("pemGenertaR")
document()
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Install Package
setwd("..")
install("pemGenertaR")
library(pemgeneratr)
?pemgeneratr
?make_lines
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Install Package
setwd("..")
install("pemGenertaR")
library(pemgeneratr)
library("pemgeneratr")
?make_lines
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
## Install Package
setwd("..")
document()
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# # devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
## Initialize Package ----------------------------------
# # install.packages("devtools")
# library("devtools")
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
??document
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
document()
install.packages("SpaDES.tools")
document()
## Install Package
setwd("..")
install("pemGenertaR")
setwd("./pemGenertaR")
library(pemgeneratr)
?make_lines
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
?make_lines
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
?make_lines
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
?make_lines
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
library(pemgeneratr)
remove.packages("pemgeneratr")
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Initialize Package ----------------------------------
# # install.packages("devtools")
library("devtools")
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
#
# create("PEMWorkFlow")
setwd("e:/workspace/2020/PEM")
## Compile Documentation -------------------------------
setwd("./pemGenertaR/")
document()
## Install Package
setwd("..")
install("pemGenertaR")
source('E:/workspace/2020/PEM/SetupMaintenance_PEMgeneratr.R')
