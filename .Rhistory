# http://www.saga-gis.org/saga_tool_doc/7.2.0/ta_lighting_5.html
POS <- "OpennessPositive.sgrd"
NEG <- "OpennessNegative.sgrd"
sysCMD <- paste(saga_cmd, "ta_lighting 5", "-DEM", sDTM,                # Input DTM
"-POS", POS, "-NEG", NEG,                               # Outputs
"-RADIUS", 1000, "-METHOD", 1,                          # Default Parameters
"-DLEVEL",  3, "-NDIRS", 8
)
system(sysCMD)
##### >> 10 -- Diuranal Anisotropic Heating -----------------------------
# http://www.saga-gis.org/saga_tool_doc/7.2.0/ta_morphometry_12.html
dAH <- "dAH.sgrd"
sysCMD <- paste(saga_cmd, "ta_morphometry 12", "-DEM", sDTM,            # Input DTM
"-DAH", dAH,                                            # Output
"-ALPHA_MAX", 202.5                                     # Default Parameters
)
system(sysCMD)
##### >> 11 -- Slope Aspect and Curvature -------------------------------
# http://www.saga-gis.org/saga_tool_doc/7.2.0/ta_morphometry_0.html
Slope <- "Slope.sgrd"
Aspect <- "Aspect.sgrd"
Curvature <- "gCurvature.sgrd"
tCurve <- "tCurve.sgrd"
sysCMD <- paste(saga_cmd, "ta_morphometry 0", "-ELEVATION", sDTM,       # Input DTM
"-SLOPE", Slope, "-ASPECT", Aspect,                     # Outputs
"-C_GENE", Curvature, "-C_TOTA", tCurve,                # Outputs
"-METHOD", 6, "-UNIT_SLOPE", 0, "-UNIT_ASPECT", 0       # Default Parameters
)
system(sysCMD)
##### >> 12 -- Topogrphic Position Index --------------------------------
# http://www.saga-gis.org/saga_tool_doc/7.2.0/ta_morphometry_18.html
TPI <- "TPI.sgrd"
sysCMD <- paste(saga_cmd, "ta_morphometry 18", "-DEM", sDTM,            # Input DTM
"-TPI", TPI,                                            # Output
"-STANDARD", 0, "-RADIUS_MIN", 0, "-RADIUS_MAX", 100,   # Default Parameters
"-DW_WEIGHTING", 0, "-DW_IDW_POWER", 1,
"-DW_IDW_OFFSET", 1, "-DW_BANDWIDTH", 75
)
system(sysCMD)
source('E:/workspace/2019/PEM_2020/SetupMaintenance_PEMgeneratr.R')
??PEMgeneratr::aoi_snap ## Confirm help file works
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_250cm.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
library(sf)
library(raster)
library(PEMgeneratr)
library(rgdal)
library(tmap)
aoi_raw <- st_read("../data/Block_aoi.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
aoi <- aoi_snap(aoi_raw)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_250cm.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
e$name <- "Original AOI"
aoi$name <- "Adjusted AOI"
dtm_e$name <- "Original DTM extent"
tm_shape(dtm_e) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "red", lwd = 2) +
tm_shape(dtm) + tm_raster(title = "DTM: Elevation", style = "cont") +
tm_shape(e) + tm_fill(col = "name",  alpha = 0, title = "") +
tm_borders(col = "green", lwd = 2.0) +
tm_shape(aoi) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "blue", lwd = 2) +
tm_layout(legend.outside = TRUE, frame = FALSE)
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = "./CoVars" )
list.files(path = "./CoVars/saga/", pattern = "*.sdat")
source('E:/workspace/2019/PEM_2020/SetupMaintenance_PEMgeneratr.R')
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
library(sf)
library(raster)
library(PEMgeneratr)
library(rgdal)
library(tmap)
aoi_raw <- st_read("../data/Block_aoi.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
aoi <- aoi_snap(aoi_raw)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
e$name <- "Original AOI"
aoi$name <- "Adjusted AOI"
dtm_e$name <- "Original DTM extent"
tm_shape(dtm_e) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "red", lwd = 2) +
tm_shape(dtm) + tm_raster(title = "DTM: Elevation", style = "cont") +
tm_shape(e) + tm_fill(col = "name",  alpha = 0, title = "") +
tm_borders(col = "green", lwd = 2.0) +
tm_shape(aoi) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "blue", lwd = 2) +
tm_layout(legend.outside = TRUE, frame = FALSE)
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = "./CoVars10" )
list.files(path = "./CoVars10/saga/", pattern = "*.sdat")
list.files(path = "./CoVars10/saga/", pattern = "*.sdat")
cv_dat
cv_dtm
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
library(sf)
library(raster)
library(PEMgeneratr)
library(rgdal)
library(tmap)
aoi_raw <- st_read("../data/Block_aoi.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
aoi <- aoi_snap(aoi_raw)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
e$name <- "Original AOI"
aoi$name <- "Adjusted AOI"
dtm_e$name <- "Original DTM extent"
tm_shape(dtm_e) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "red", lwd = 2) +
tm_shape(dtm) + tm_raster(title = "DTM: Elevation", style = "cont") +
tm_shape(e) + tm_fill(col = "name",  alpha = 0, title = "") +
tm_borders(col = "green", lwd = 2.0) +
tm_shape(aoi) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "blue", lwd = 2) +
tm_layout(legend.outside = TRUE, frame = FALSE)
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = "./CoVars10" )
list.files(path = "./CoVars10/saga/", pattern = "*.sdat")
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = "./CoVars10" )
cv_dtm
source('E:/workspace/2019/PEM_2020/SetupMaintenance_PEMgeneratr.R')
library(PEMgeneratr)
cv_dtm
source('~/.active-rstudio-document', echo=TRUE)
getwd()
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
library(sf)
library(raster)
library(PEMgeneratr)
library(rgdal)
library(tmap)
aoi_raw <- st_read("../data/Block_aoi.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
aoi <- aoi_snap(aoi_raw)
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
library(sf)
library(raster)
library(PEMgeneratr)
library(rgdal)
library(tmap)
aoi_raw <- st_read("../data/Block_aoi.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
aoi <- aoi_snap(aoi_raw)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
e$name <- "Original AOI"
aoi$name <- "Adjusted AOI"
dtm_e$name <- "Original DTM extent"
tm_shape(dtm_e) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "red", lwd = 2) +
tm_shape(dtm) + tm_raster(title = "DTM: Elevation", style = "cont") +
tm_shape(e) + tm_fill(col = "name",  alpha = 0, title = "") +
tm_borders(col = "green", lwd = 2.0) +
tm_shape(aoi) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "blue", lwd = 2) +
tm_layout(legend.outside = TRUE, frame = FALSE)
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = "./CoVars10" )
list.files(path = "./CoVars10/saga/", pattern = "*.sdat")
if(!file.exists("./CoVars10/")){999}
if(!dir.exists("./CoVars10/")){999}
if(!dir.exists("./CoVars10/")){999}
if(!dir.exists("./CoVars10b/")){999}
if(!dir.exists("./CoVars10/")){
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = "./CoVars10" )
}
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
library(sf)
library(raster)
library(PEMgeneratr)
library(rgdal)
library(tmap)
aoi_raw <- st_read("../data/Block_aoi.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
aoi <- aoi_snap(aoi_raw)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
e$name <- "Original AOI"
aoi$name <- "Adjusted AOI"
dtm_e$name <- "Original DTM extent"
tm_shape(dtm_e) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "red", lwd = 2) +
tm_shape(dtm) + tm_raster(title = "DTM: Elevation", style = "cont") +
tm_shape(e) + tm_fill(col = "name",  alpha = 0, title = "") +
tm_borders(col = "green", lwd = 2.0) +
tm_shape(aoi) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "blue", lwd = 2) +
tm_layout(legend.outside = TRUE, frame = FALSE)
if(!dir.exists("./CoVars10/")){
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = "./CoVars10" )
}
list.files(path = "./CoVars10/saga/", pattern = "*.sdat")
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
library(sf)
library(raster)
library(PEMgeneratr)
library(rgdal)
library(tmap)
aoi_raw <- st_read("../data/Block_aoi.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
aoi <- aoi_snap(aoi_raw)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
e$name <- "Original AOI"
aoi$name <- "Adjusted AOI"
dtm_e$name <- "Original DTM extent"
tm_shape(dtm_e) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "red", lwd = 2) +
tm_shape(dtm) + tm_raster(title = "DTM: Elevation", style = "cont") +
tm_shape(e) + tm_fill(col = "name",  alpha = 0, title = "") +
tm_borders(col = "green", lwd = 2.0) +
tm_shape(aoi) + tm_fill(col = "name", alpha = 0, title = "") +
tm_borders(col = "blue", lwd = 2) +
tm_layout(legend.outside = TRUE, frame = FALSE)
if(!dir.exists("./CoVars10/")){
cv_dtm(dtm, SAGApath = "C:/SAGA/", output = "./CoVars10" )
}
list.files(path = "./CoVars10/saga/", pattern = "*.sdat")
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10.tif")
dtm
dtm2 <- raster("../data/dtm.tif")
?crs
crs(dtm)
crs(dtm2)
crs(dtm) <- crs(dtm2)
writeGDAL(dtm, "../data/dtm_10.tif"), overwrite = TRUE)
writeRaster(dtm, "../data/dtm_10.tif"), overwrite = TRUE)
writeRaster(dtm, "../data/dtm_10.tif", overwrite = TRUE)
writeRaster(dtm, "../data/dtm_10b.tif", overwrite = TRUE)
writeRaster(dtm, "../data/dtm_10b.tif", overwrite = TRUE)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10b.tif")
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10.tif")
dtm2 <- raster("../data/dtm.tif")
crs(dtm) <- crs(dtm2)
writeRaster(dtm, "../data/dtm_10b.tif", overwrite = TRUE)
dtm2 <- raster("../data/dtm.tif")
crs(dtm) <- crs(dtm2)
writeRaster(dtm, "../data/dtm_10b.tif", overwrite = TRUE)
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
aoi <- aoi_snap(aoi_raw)
aoi <- st_transform(aoi, dtm)
aoi <- st_transform(aoi, crs(dtm))
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
knitr::opts_chunk$set(echo = TRUE, cache=FALSE, warning = FALSE, message = FALSE, results = 'show' )
aoi <- aoi_snap(aoi_raw)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10b.tif")
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10.tif")
dtm2 <- raster("../data/dtm.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
aoi <- st_transform(aoi, crs(dtm))
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
extent(aoi)
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
z <- crs(aoi)
x <- crs(dtm)
z = x
z <- crs(aoi)
z = x
z <- crs(aoi)
x <- crs(dtm)
z == x
aoi
dtm
library(sf)
library(raster)
library(PEMgeneratr)
library(rgdal)
library(tmap)
aoi_raw <- st_read("../data/Block_aoi.gpkg", quiet = TRUE)
e <- as(extent(aoi_raw), "SpatialPolygons") ## for use in map below.
aoi <- aoi_snap(aoi_raw)
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
# aoi <- st_transform(aoi, crs(dtm))
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
dtm2 <- raster("../data/dtm_10.tif")
x <- crs(dtm)
y <- crs(dtm2)
x == y
x
y
# dtm <- data(dtm) ## Sample data provided -- ACTION DOCUMENT THIS.... not working
dtm <- raster("../data/dtm_10.tif")
dtm_e <- as(extent(dtm), "SpatialPolygons") ## for use later
# saveRDS(dtm, "./data/dtm.rds")
dim(dtm); extent(dtm)
# aoi <- st_transform(aoi, crs(dtm))
dtm <- crop(dtm, aoi)
# aoi <- st_transform(aoi, crs(dtm))
dtm <- crop(dtm, aoi)
dim(dtm) ; extent(dtm)
?gsub
outname <- gsub(".tif", ".sdat", input)
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- "dtm_cropped.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
## Begin Function
# OUTPUTS: ------------------------------------------------------------
## sets up tested file folders for all covariates
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), print("Directory Already Exisits"))        #create tmpOut
saga_tmp_files <- paste0(output,"/saga/")
ifelse(!dir.exists(file.path(saga_tmp_files)),              #if tmpOut Does not Exists
dir.create(file.path(saga_tmp_files)), print("Directory Already Exisits"))        #create tmpOut
## Create a SAGA version of the input file
r <- readGDAL(input)
## Create a SAGA version of the input file
r <- rgdal::readGDAL(input)
outname <- gsub(".tif", ".sdat", input)
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- "dtm_cropped.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
## Begin Function
# OUTPUTS: ------------------------------------------------------------
## sets up tested file folders for all covariates
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), print("Directory Already Exisits"))        #create tmpOut
saga_tmp_files <- paste0(output,"/saga/")
ifelse(!dir.exists(file.path(saga_tmp_files)),              #if tmpOut Does not Exists
dir.create(file.path(saga_tmp_files)), print("Directory Already Exisits"))        #create tmpOut
r <- rgdal::readGDAL(input)
outname <- gsub(".tif", paste0("_", i ,".sdat", input)
outname <- gsub(".tif", paste0("_", i ,".sdat", input))
outname <- gsub(".tif", paste0("_", i ,".sdat"), input))
##Testing
i <- resolution[1]
r <- rgdal::readGDAL(input)
outname <- gsub(".tif", paste0("_", i ,".sdat"), input))
paste0("_", i ,".sdat")
outsuf <- paste0("_", i ,".sdat")
outname <- gsub(".tif", outsuf , input))
outname <- gsub(".tif", outsuf , input)
rgdal::writeOGR(r, paste(saga_tmp_files, outname, sep="/"), driver="SAGA")
rgdal::writeOGR(r, paste(saga_tmp_files, outname, sep="/"), driver="Saga")
rgdal::writeGDAL(r, paste(saga_tmp_files, outname, sep="/"), driver="Saga")
rgdal::writeGDAL(r, paste(saga_tmp_files, outname, sep="/"), driver="Saga")
rgdal::writeGDAL(r, paste(saga_tmp_files, outname, sep="/"), driver="SAGA")
rgdal::writeGDAL(r, paste(saga_tmp_files, outname, sep="/"), driver="SAGA")
##testing
setwd("e:/workspace/2019/PEM_2020/data/")
input <- "dtm_cropped.tif"
resolution <- c(2.5, 5, 10, 25)
iMetrics <- raster(input)
# r <- rgdal::readGDAL(input)
rtn <- getwd()
# setwd("../data/")
output <- "CoVars"
## Begin Function
# OUTPUTS: ------------------------------------------------------------
## sets up tested file folders for all covariates
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), print("Directory Already Exisits"))        #create tmpOut
saga_tmp_files <- paste0(output,"/saga/")
ifelse(!dir.exists(file.path(saga_tmp_files)),              #if tmpOut Does not Exists
dir.create(file.path(saga_tmp_files)), print("Directory Already Exisits"))        #create tmpOut
##Testing
i <- resolution[1]
## Create Saga version of raster
r <- rgdal::readGDAL(input)
# outsuf <- paste0("_", i ,".sdat")  ## new file ending
outname <- gsub(".tif", ".sdat" , input)
outname
rgdal::writeGDAL(r, paste(saga_tmp_files, outname, sep="/"), driver="SAGA")
##Testing
i <- resolution[1]
saga_in <- paste(output, "saga", outname, sep = "/")
saga_in
outname
outsuf <- paste0("_", i ,".sdat")  ## new file ending
outsuf <- paste0("_", i ,".sdat")  ## new file ending
saga_out <- gsub(".sdat", outsuf, outname)
saga_out
sysCMD <- paste(saga_cmd, "grid_tools", "Resampling", "-TARGET_DEFINITION 0",
"-INPUT", saga_in,
"-KEEP_TYPE",  "true",
"-SCALE_UP",    5,  ## mean value
"-SCALE_DOWN",  3,  ## B-spline Interpolation
"-TARGET_USER_SIZE", i,  ## Output resolution
"-TARGET_USER_FITS,  0", ## Fits to Nodes (1 would be cells)
"-OUTPUT", saga_out)
system(sysCMD)
sysCMD <- paste(saga_cmd, "grid_tools", "Resampling", "-TARGET_DEFINITION 0",
"-INPUT", saga_in,
"-KEEP_TYPE",  "true",
"-SCALE_UP",    5,  ## mean value
"-SCALE_DOWN",  3,  ## B-spline Interpolation
"-TARGET_USER_SIZE", i,  ## Output resolution
"-TARGET_USER_FITS,  0", ## Fits to Nodes (1 would be cells)
"-OUTPUT", saga_out)
##### Link SAGA to R --------------------------------------------------
if(Sys.info()['sysname']=="Windows"){saga_cmd = paste0(SAGApath, "saga_cmd.exe")
} else {saga_cmd = "saga_cmd"}  ;
z<- system(paste(saga_cmd, "-v"), intern = TRUE)  ## prints that SAGA version number -- confirming it works.
SAGApath <- "C:/SAGA/"
##### Link SAGA to R --------------------------------------------------
if(Sys.info()['sysname']=="Windows"){saga_cmd = paste0(SAGApath, "saga_cmd.exe")
} else {saga_cmd = "saga_cmd"}  ;
z<- system(paste(saga_cmd, "-v"), intern = TRUE)  ## prints that SAGA version number -- confirming it works.
print(z)
# OUTPUTS: ------------------------------------------------------------
## sets up tested file folders for all covariates
ifelse(!dir.exists(file.path(output)),              #if tmpOut Does not Exists
dir.create(file.path(output)), print("Directory Already Exisits"))        #create tmpOut
saga_tmp_files <- paste0(output,"/saga/")
ifelse(!dir.exists(file.path(saga_tmp_files)),              #if tmpOut Does not Exists
dir.create(file.path(saga_tmp_files)), print("Directory Already Exisits"))        #create tmpOut
## Create a SAGA version of the input file
r <- rgdal::readGDAL(input)
outname <- gsub(".tif", ".sdat" , input)
rgdal::writeGDAL(r, paste(saga_tmp_files, outname, sep="/"), driver="SAGA")
saga_in <- paste(output, "saga", outname, sep = "/")  ## realtive filename of input saga file
##Testing
i <- resolution[1]
outsuf <- paste0("_", i ,".sdat")  ## new file ending
saga_out <- gsub(".sdat", outsuf, outname)
sysCMD <- paste(saga_cmd, "grid_tools", "Resampling", "-TARGET_DEFINITION 0",
"-INPUT", saga_in,
"-KEEP_TYPE",  "true",
"-SCALE_UP",    5,  ## mean value
"-SCALE_DOWN",  3,  ## B-spline Interpolation
"-TARGET_USER_SIZE", i,  ## Output resolution
"-TARGET_USER_FITS,  0", ## Fits to Nodes (1 would be cells)
"-OUTPUT", saga_out)
system(sysCMD)
sysCMD <- paste(saga_cmd, "grid_tools", "Resampling", "-TARGET_DEFINITION 0",
"-INPUT", saga_in,
"-KEEP_TYPE",  "true",
"-SCALE_UP",    5,  ## mean value
"-SCALE_DOWN",  3,  ## B-spline Interpolation
"-TARGET_USER_SIZE", i,  ## Output resolution
# "-TARGET_USER_FITS,  0", ## Fits to Nodes (1 would be cells)
"-OUTPUT", saga_out)
system(sysCMD)
saga_out
saga_tmp_files
saga_out <- paste(saga_tmp_files, saga_out, sep = "/")
saga_tmp_files
saga_tmp_files
saga_out
saga_out <- gsub(".sdat", outsuf, outname)
saga_out <- paste0(saga_tmp_files, saga_out)
saga_out
sysCMD <- paste(saga_cmd, "grid_tools", "Resampling", "-TARGET_DEFINITION 0",
"-INPUT", saga_in,
"-KEEP_TYPE",  "true",
"-SCALE_UP",    5,  ## mean value
"-SCALE_DOWN",  3,  ## B-spline Interpolation
"-TARGET_USER_SIZE", i,  ## Output resolution
# "-TARGET_USER_FITS,  0", ## Fits to Nodes (1 would be cells)
"-OUTPUT", saga_out)
system(sysCMD)
